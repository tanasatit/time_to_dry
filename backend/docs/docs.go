// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/combined": {
            "get": {
                "description": "Returns all Weather API from tmd table.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CombinedData"
                ],
                "summary": "Get all combined records",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CombinedData"
                            }
                        }
                    }
                }
            }
        },
        "/api/combined/populate": {
            "post": {
                "description": "Matches closest timestamp from tmd for each time_to_dry record and inserts combined row if not duplicate.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "CombinedData"
                ],
                "summary": "Populate combined_data from time_to_dry and tmd",
                "responses": {
                    "200": {
                        "description": "Combined data populated",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/forecast/rain": {
            "get": {
                "description": "Uses current weather data to estimate rainfall based on weather description.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forecast"
                ],
                "summary": "Estimate if it's currently raining or likely to rain",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/timetodry": {
            "get": {
                "description": "Returns all sensor records from the time_to_dry table.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TimeToDry"
                ],
                "summary": "Get all time_to_dry records",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TimeToDry"
                            }
                        }
                    }
                }
            }
        },
        "/api/tmd": {
            "get": {
                "description": "Returns all Weather API from tmd table.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TMD"
                ],
                "summary": "Get all tmd records",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TMD"
                            }
                        }
                    }
                }
            }
        },
        "/api/tmd/recent": {
            "get": {
                "description": "Returns the 8 most recent weather data records from the TMD table within the last 24 hours.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TMD"
                ],
                "summary": "Get last 24 hours of TMD data (latest 8 rows)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TMD"
                            }
                        }
                    }
                }
            }
        },
        "/api/tmd/today": {
            "get": {
                "description": "Returns all weather data from the TMD table for today.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TMD"
                ],
                "summary": "Get today's TMD records",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TMD"
                            }
                        }
                    }
                }
            }
        },
        "/api/ttd/latest": {
            "get": {
                "description": "Returns the highest test_id from time_to_dry table.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Test"
                ],
                "summary": "Get the latest test_id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        },
        "/api/ttd/latest/all": {
            "get": {
                "description": "Returns all time_to_dry rows that share the latest test_id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Test"
                ],
                "summary": "Get all rows of latest test_id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TimeToDry"
                            }
                        }
                    }
                }
            }
        },
        "/api/ttd/latest/last": {
            "get": {
                "description": "Returns the latest time_to_dry row (by timestamp) for the latest test_id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Test"
                ],
                "summary": "Get the most recent row of latest test_id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TimeToDry"
                        }
                    }
                }
            }
        },
        "/api/ttd/status": {
            "get": {
                "description": "Returns whether the device is active (sending data within last 5 minutes).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device"
                ],
                "summary": "Check device status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CombinedData": {
            "type": "object",
            "properties": {
                "api_humidity": {
                    "type": "number"
                },
                "api_temp": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "diff_hum": {
                    "type": "number"
                },
                "diff_temp": {
                    "type": "number"
                },
                "hum_in": {
                    "type": "number"
                },
                "hum_out": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                },
                "rainfall": {
                    "type": "number"
                },
                "temp_in": {
                    "type": "number"
                },
                "temp_out": {
                    "type": "number"
                },
                "test_id": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.TMD": {
            "type": "object",
            "properties": {
                "humidity": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "rainfall": {
                    "type": "number"
                },
                "temperature": {
                    "type": "number"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.TimeToDry": {
            "type": "object",
            "properties": {
                "diff_hum": {
                    "type": "number"
                },
                "diff_temp": {
                    "type": "number"
                },
                "hum_in": {
                    "type": "number"
                },
                "hum_out": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "lat": {
                    "type": "number"
                },
                "light": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                },
                "temp_in": {
                    "type": "number"
                },
                "temp_out": {
                    "type": "number"
                },
                "test_id": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Time To Dry API",
	Description:      "This is the backend API for the Time to Dry project.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
